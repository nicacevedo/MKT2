geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:`Product line`)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:`Product line`:Week)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:Week)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:Hour)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
ggplot(df) +
aes(x=`Unit price`*Quiantity, y=Rating, col=Gender:Hour)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`*Quantity, y=Rating, col=Gender:Hour)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#
ggplot(df) +
aes(x=Total, y=Rating, col=Gender:Hour)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
ggplot(df) +
aes(x=Total, y=Rating, col=Branch:Gender)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=Total, y=Rating, col=Branch:Gender:`Product line`)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
ggplot(df) +
aes(x=Total, y=Rating, col=Gender:`Product line`)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
ggplot(df) +
aes(x=Total, y=Rating, col=Gender:`Product line`:Day)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=Total, y=Rating, col=Gender:Day)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:Day)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:Day)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender:Semana)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm")
#. Scatterplot Branch
ggplot(df) +
aes(x=`Unit price`, y=Rating, col=Gender)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm")
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender, y=Rating, col=Semana) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender, y=Rating, col=Week) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:Branch, y=Rating, col=Week) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:`Product line`, y=Rating, col=Week) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:`Product line`, y=Rating, col=Week) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:Week, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:Month, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:Hour, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Gender:Frac_Day, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Branch:Frac_Day, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Payment:Frac_Day, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Payment:Month, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Payment:Week, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Payment:Branch, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Branch:Payment, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  + Payment + `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  + Payment + `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  * Payment + `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  * Payment + `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  * Payment * `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=`Product line`, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Gender, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Gender:Payment, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Payment:Gender, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#Divsion de los datos
# samples aleatorio
index <- sample(1:nrow(df), size= nrow(df)*0.7)
# entrenamiento 80%
train <- df[index, ]
# test 20%
test  <- df[-index, ]
#Regresiones regulares
#0. Regresion lineal sin diferenciar por tienda
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender + `Product line` + `Unit price` + + Quantity + `Unit price`*Quantity + Payment + Month + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender + `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Payment + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  * Payment * `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#. Boxplot Gender:Payment v/s Rating r/ `Product line`
ggplot(df) +
aes(x=Gender:Payment, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot Gender:Payment v/s Rating r/ `Product line`
ggplot(df) +
aes(x=Payment:Gender, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot Gender:`Customer type` v/s Rating r/ Payment
ggplot(df) +
aes(x=`Customer type`:Gender, y=Rating, col=Payment) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot Gender:`Customer type` v/s Rating r/ Payment
ggplot(df) +
aes(x=Payment:Gender, y=Rating, col=`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot Branch:Gender:`Customer type` v/s Rating r/ `Product Line`
ggplot(df) +
aes(x=`Customer type`:Payment:Gender, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  * Payment * `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` * Gender  * Payment * `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender  * Payment * `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones con intervalos
#0.2 Regresion lineal con intervalos temporales
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender + `Product line` + `Unit price` + Quantity + `Unit price`*Quantity + Payment + Month + Week + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
na.action = na.pass, # Ignorar NA
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones regulares
#0. Regresion lineal sin diferenciar por tienda
train.lm <- train(form = Rating ~ Branch + `Customer type` + Gender + `Product line` + `Unit price` + + Quantity + `Unit price`*Quantity + Payment + Month + Day + Hour, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
print(paste('Error de predicción: ', mean(abs(error.lm))))
#. Boxplot Branch:Gender v/s Rating r/ `Customer type`
ggplot(df) +
aes(x=Branch:Gender, y=Rating, col=`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Branch, y=Rating, col=Gender) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
ggplot(df) +
aes(x=Branch:Gender, y=Rating, col=`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
ggplot(df) +
aes(x=Payment, y=`Product line`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#. Boxplot `Product line`  v/s Rating r/ Payment
ggplot(df) +
aes(x=Payment, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Day
ggplot(df) +
aes(x=Branch, y=Rating, col=Day) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Day
ggplot(df) +
aes(x=Day, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
ggplot(df) +
aes(x=reorder(Day), y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
ggplot(df) +
aes(x=reorder(Day, Day), y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
# Agregamos el día de la semana (ordenados)
df$Day <- as.factor(weekdays(df$Date), levels= c("Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# Agregamos el día de la semana (ordenados)
df$Day <- as.factor(weekdays(df$Date), ordered= c("Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# Agregamos el día de la semana (ordenados)
df$Day <- as.factor(weekdays(df$Date), levels = c("Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# Agregamos el día de la semana (ordenados)
df$Day <- factor(weekdays(df$Date), levels = c("Monday",
"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
#. Boxplot Branch v/s Rating r/ Day
ggplot(df) +
aes(x=order(Day), y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
ggplot(df) +
aes(x=Day, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
ggplot(df) +
aes(x=Week, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
df$Week <- as.factor(ceiling(day(df$Date)/7))
df[df$Week == 5,'Week'] <- 4
# Dividimos el mes en semanas de 7 días (la 5ta la pasamos a 4ta para que no se muy desnivelado)
df$Week <- as.factor(ceiling(day(df$Date)/7))
df[df$Week == 5,'Week'] <- '4'
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Week, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Semana, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Semana:Day, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Day
ggplot(df) +
aes(x=Day, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Semana, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Week, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Month, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Day
ggplot(df) +
aes(x=Day, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Week, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
# Tiempo agregado
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Semana, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Month, y=Rating, col=Branch) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
ggplot(df) +
aes(x=Day, y=Rating, col=Branch:`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch:`Customer type` v/s Rating r/ Day
ggplot(df) +
aes(x=Day, y=Rating, col=Branch:`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Week, y=Rating, col=Branch:`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
# Tiempo contínuo
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Semana, y=Rating, col=Branch:`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ Week
ggplot(df) +
aes(x=Month, y=Rating, col=Branch:`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch v/s Rating r/ `Customer type`
ggplot(df) +
aes(x=Branch, y=Rating, col=`Customer type`) +
geom_boxplot(alpha=0.4, fill='white') #cambiamos el tipo de gráfico
#. Boxplot Branch:`Customer type` v/s Rating r/ `Product Line`
ggplot(df) +
aes(x=Branch:`Customer type`, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
#. Boxplot Branch:`Customer type` v/s Rating r/ `Product Line`
ggplot(df) +
aes(x=`Customer type`:Branch, y=Rating, col=`Product line`) +
geom_boxplot(alpha=0.4, fill='white') + #cambiamos el tipo de gráfico
theme(axis.text.x = element_text(angle = 30))
