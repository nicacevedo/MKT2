#L1[!upper.tri(modelo_probit)]
L1 <- matrix(0, 3, 3)
L1[!upper.tri(L1)] <- c(1, coef(modelo_probit)[8:12])
#c(1, coef(modelo_probit)[8:12])
#L1[!upper.tri(modelo_probit)]
L1 <- matrix(0, 3, 3)
L1[!upper.tri(L1)] <- c(1, coef(modelo_probit)[8:12])
L1
#c(1, coef(modelo_probit)[8:12])
#L1[!upper.tri(modelo_probit)]
L1 <- matrix(0, 3, 3)
L1[!upper.tri(L1)] <- c(1, coef(modelo_probit)[8:12])
L1 %*% t(L1)
#matriz var covar
vcov(modelo_probit[8:12])
#matriz var covar
vcov(modelo_probit[8:12])
#matriz var covar
vcov(modelo_probit)
#matriz var covar
vcov(modelo_probit[8:12,])
#matriz var covar
modelo_probit
#matriz var covar
modelo_probit
#Modelo probit
modelo_probit <- mlogit(mode ~ price + catch | income | 0, data = Fishing2, probit = TRUE)#, print.level=1)
#Modelo probit
modelo_probit <- mlogit(mode ~ price | income | 0, data = Fishing2, probit = TRUE)#, print.level=1)
summary(modelo_probit)
#matriz var covar
#vcov(modelo_probit)
# Descomposición
L <- matrix(0, 3, 3)
L[!upper.tri(L)] <- c(1, coef(modelo_probit)[8:12])
#matriz var covar
V <- L %*% t(L)
V
M <- matrix(0, 3, 3)
#M[0,0] <- 0
M
M <- matrix(0, 3, 3)
M[,1] <- c(0 , 1, 0)
M[,2] <- c(-1,-1,-1)
M[,3] <- c(0 , 0, 1)
M
solve(M)
V_final = solve(M) %*% V %*% t(solve(M))
V_final
V_final = solve(M) %*% V %*% t(solve(M))
V_final
L
L = L + t(L)
L = L + t(L)
L
knitr::opts_chunk$set(echo = TRUE)
#Se limpia el espacio de trabajo
rm(list=ls())				# Limpiamos todos los objetos creados en R
graphics.off()	    # se limpian los graficos
#Se carga la base de datos
data("Fishing", package = "mlogit")
#cargar libreria
library(mlogit)
install.packages('mlogit')
#Se carga la base de datos
data("Fishing", package = "mlogit")
head(Fishing, 5)
#cargar libreria
library(mlogit)
#Formatear la data
Fishing2 <- mlogit.data(data = Fishing, shape = "wide", varying=2:9, choice = "mode")
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ price + catch| income | 0 , data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ price + catch + income , data=Fishing2)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ price + catch | income , data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ price + catch | 1 | income , data=Fishing2)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ 0 | price + catch , data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ 0 | | | price + catch , data=Fishing2)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ 0 | 1 | price + catch , data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~ 0 | price + catch , data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~  price + catch | income |, data=Fishing2)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~  price + catch | income , data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~  price + catch | income | 1, data=Fishing2)
summary(modelo_logit)
#La base ya viene en formato long, por lo que tiramos Logit condicionado
modelo_logit<-mlogit(mode ~  price + catch | income | 0, data=Fishing2)
summary(modelo_logit)
rm(list=ls())       # clear the list of objects
graphics.off()			# clear the list of graphs
options(digits = 3)	# number of digits to display
library(mlogit)			# load package to compare
paneldata <- read.table(file="yogurt data.txt", header=TRUE, sep="")		#complete data file loaded in a matrix*/
paneldata <- read.table(file="./yogurt data.txt", header=TRUE, sep="")		#complete data file loaded in a matrix*/
paneldata <- read.table(file="./Class_15_Estimation_of_logit_and_probit/yogurt data.txt", header=TRUE, sep="")		#complete data file loaded in a matrix*/
getwd()
paneldata <- read.table(file="./Tarea2/Class_15_Estimation_of_logit_and_probit/yogurt data.txt", header=TRUE, sep="")		#complete data file loaded in a matrix*/
View(paneldata)
View(paneldata)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2.csv' # Nueva base actualizada
paneldata <- read.table(file=dir, header=TRUE, sep="")		#complete data file loaded in a matrix*/
View(paneldata)
paneldata <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
View(paneldata)
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
# Eleccion a categorías
df$Eleccion <- df$Eleccion * df$Animes
View(df)
df <- df[df$Eleccion > 0,]
View(df)
# Eliminamos las columnas que sobran por completo
df <- subset(df, select = -c('CantCaps', 'Scoremyanimelist'))
# Eliminamos las columnas que sobran por completo
df <- subset(df, select = -c(7,8)) # -c('CantCaps', 'Scoremyanimelist')
View(df)
paneldata <- read.table(file="./Tarea2/Class_15_Estimation_of_logit_and_probit/yogurt data.txt", header=TRUE, sep="")		#complete data file loaded in a matrix*/
View(paneldata)
# Renombramos niveles de Elección
levels(df$Eleccion) <- c("HunterX", "DragonBall", "Naruto", "BNHA")
# format the data according to what mlogit requires
tmpchoice <- apply(choice,1,which.max)
mychoice <- array(NA, dim=n)
for(i in 1:n){
if (tmpchoice[i] == 1) mychoice[i]="yoplait"
if (tmpchoice[i] == 2) mychoice[i]="danone"
if (tmpchoice[i] == 3) mychoice[i]="hiland"
if (tmpchoice[i] == 4) mychoice[i]="weightw"
}
rm(tmpchoice)
levels(mychoice) <- c("yoplait", "danone", "hiland", "weightw")
myyogurt <- data.frame(ch=mychoice,
price.yoplait=prices[,1], price.danone=prices[,2], price.hiland=prices[,3], price.weightw=prices[,4],
featr.yoplait=featur[,1], featr.danone=featur[,2], featr.hiland=featur[,3], featr.weightw=featur[,4])
myfrmyogurt <- mlogit.data(myyogurt, shape="wide", varying=2:9, choice="ch")		#format the data
tmpchoice <- apply(choice,1,which.max)
mychoice <- array(NA, dim=n)
len(paneldata)
nrows(paneldata)
nrow(paneldata)
# format the data according to what mlogit requires
tmpchoice <- apply(choice,1,which.max)
mychoice <- array(NA, dim=nrow(paneldata))
choice <- paneldata[,2:5]						# choice is the sub matrix containing all rows and the 07-10 column (1 if bought the brand)
View(choice)
mychoice <- array(NA, dim=nrow(paneldata))
for(i in 1:n){
if (tmpchoice[i] == 1) mychoice[i]="yoplait"
if (tmpchoice[i] == 2) mychoice[i]="danone"
if (tmpchoice[i] == 3) mychoice[i]="hiland"
if (tmpchoice[i] == 4) mychoice[i]="weightw"
}
rm(tmpchoice)
levels(mychoice) <- c("yoplait", "danone", "hiland", "weightw")
# format the data according to what mlogit requires
tmpchoice <- apply(choice,1,which.max)
mychoice <- array(NA, dim=nrow(paneldata))
for(i in 1:nrow(paneldata)){
if (tmpchoice[i] == 1) mychoice[i]="yoplait"
if (tmpchoice[i] == 2) mychoice[i]="danone"
if (tmpchoice[i] == 3) mychoice[i]="hiland"
if (tmpchoice[i] == 4) mychoice[i]="weightw"
}
rm(tmpchoice)
levels(mychoice) <- c("yoplait", "danone", "hiland", "weightw")
myyogurt <- data.frame(ch=mychoice,
price.yoplait=prices[,1], price.danone=prices[,2], price.hiland=prices[,3], price.weightw=prices[,4],
featr.yoplait=featur[,1], featr.danone=featur[,2], featr.hiland=featur[,3], featr.weightw=featur[,4])
paneldata <- read.table(file="./Tarea2/Class_15_Estimation_of_logit_and_probit/yogurt data.txt", header=TRUE, sep="")		#complete data file loaded in a matrix*/
idcust <- paneldata[,1]							# idcust is the sub matrix containing all rows and the first column (IdPanel)
choice <- paneldata[,2:5]						# choice is the sub matrix containing all rows and the 07-10 column (1 if bought the brand)
featur <- paneldata[,6:9]						# featur is the sub matrix containing all rows and the 11-14 column (Feature 4 brands)
prices <- paneldata[,10:13]					# prices is the sub matrix containing all rows and the 15-18 column (Price 4 brands)
n		 <- nrow(paneldata)						# returns the number of rows in the complete matrix
ncus <- length(unique(idcust))		# returns number of customers in the panel
nbra <- ncol(choice)							# returns number of brands in the set
ones <- rep(1,n)	          			# a column vector of n ones, one for each row (useful for intercepts)
yoplai <- cbind(ones,prices[,1],featur[,1])		# matrix for yop-brand: concatenation of ones, prices and features
danone <- cbind(prices[,2],featur[,2])			    # matrix for dan-brand: concatenation of ones, prices and features
hiland <- cbind(ones,prices[,3],featur[,3])		# matrix for hil-brand: concatenation of ones, prices and features
wwatch <- cbind(ones,prices[,4],featur[,4])		# matrix for wwt-brand: prices and features, asumes constant 0
# format the data according to what mlogit requires
tmpchoice <- apply(choice,1,which.max)
mychoice <- array(NA, dim=nrow(paneldata))
for(i in 1:nrow(paneldata)){
if (tmpchoice[i] == 1) mychoice[i]="yoplait"
if (tmpchoice[i] == 2) mychoice[i]="danone"
if (tmpchoice[i] == 3) mychoice[i]="hiland"
if (tmpchoice[i] == 4) mychoice[i]="weightw"
}
rm(tmpchoice)
levels(mychoice) <- c("yoplait", "danone", "hiland", "weightw")
myyogurt <- data.frame(ch=mychoice,
price.yoplait=prices[,1], price.danone=prices[,2], price.hiland=prices[,3], price.weightw=prices[,4],
featr.yoplait=featur[,1], featr.danone=featur[,2], featr.hiland=featur[,3], featr.weightw=featur[,4])
myfrmyogurt <- mlogit.data(myyogurt, shape="wide", varying=2:9, choice="ch")		#format the data
View(myfrmyogurt)
View(myyogurt)
View(myyogurt)
View(paneldata)
# Limpieza de entorno ####
rm(list=ls())       # clear the list of objects
graphics.off()			# clear the list of graphs
options(digits = 3)	# number of digits to display
# Liberías ####
library(mlogit)			# load package to compare
# Base de datos ####
dir = './Tarea2/Dataset/homogeneo.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
View(df)
View(df)
# Base de datos ####
dir = './Tarea2/Dataset/homogeneo.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
View(df)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating + Mujer + Edad, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Mujer + Edad, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration | Rating + Mujer + Edad, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | 1, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration | Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration | 1| Rating, data = df_formateada)
summary(animelogit)
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration | Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad, data = df_formateada)
summary(animelogit)
install.packages('mnlogit')
# Liberías ####
library(mlogit)			# load package to compare
library(mnlogit)
# Base de datos ####
dir = './Tarea2/Dataset/homogeneo.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mnlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad, data = df_formateada)
summary(animelogit)
# Limpieza de entorno ####
rm(list=ls())       # clear the list of objects
graphics.off()			# clear the list of graphs
options(digits = 3)	# number of digits to display
# Liberías ####
library(mlogit)			# load package to compare
library(mnlogit)
# Base de datos ####
dir = './Tarea2/Dataset/homogeneo.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mnlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad, data = df_formateada)
summary(animelogit)
View(df)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mnlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
dir = './Tarea2/Dataset/homogeneo.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
d
animelogit <- mnlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ 0 | Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ 0 | 1 |Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ 0 | Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Score + Caps | Edad + Mujer | Combat + Emotion + Qual + Duration + Rating, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer | Score, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer | Score + 0, data = df_formateada)
summary(animelogit)
#animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer | Score + 0, data = df_formateada)
animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating + Score| Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating + Score| Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating + Score -1| Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Mixed Logit
mixed_animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer, data = df_formateada,
rpar=c("(Intercept):hunterX"="n", "(Intercept):dragonball"="n", "(Intercept):naruti"="n", Combat="n", Emotion="n")
)
summary(mixed_animelogit)
# Mixed Logit
mixed_animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer, data = df_formateada,
rpar=c("(Intercept):hunterX"="n", "(Intercept):dragonball"="n", "(Intercept):naruti"="n")#, Combat="n", Emotion="n")
)
summary(mixed_animelogit)
# Mixed Logit
mixed_animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer, data = df_formateada,
rpar=c("(Intercept):hunterX"="n", "(Intercept):dragonball"="n", "(Intercept):naruto"="n", Combat="n", Emotion="n")
)
summary(mixed_animelogit)
# Limpieza de entorno ####
rm(list=ls())       # clear the list of objects
graphics.off()			# clear the list of graphs
options(digits = 3)	# number of digits to display
# Liberías ####
library(mlogit)			# load package to compare
library(mnlogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Duration + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ I(Combat/Duration) + I(Emotion/Duration) + Qual + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ I(Combat/Duration) + I(Emotion/Duration) + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ I(Combat/Duration) + I(Emotion/Duration) + Qual | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ I(Combat/Duration) + I(Emotion/Duration) + Qual | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Edad + Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Limpieza de entorno ####
rm(list=ls())       # clear the list of objects
graphics.off()			# clear the list of graphs
options(digits = 3)	# number of digits to display
# Liberías ####
library(mlogit)			# load package to compare
library(mnlogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
View(df)
View(df)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=3:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
# Base de datos ####
dir = './Tarea2/Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")		#complete data file loaded in a matrix*/
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_formateada <- mlogit.data(df, shape="wide", varying=3:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual | Mujer, data = df_formateada)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
