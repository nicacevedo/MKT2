regcoeff = array(NA, dim=c(nbranches,11))
# Loop en las tiendas
for (i in 1:nbranches){
sub_train <- train[(train$Branch==allstores[i]),]
#regrmodel = lm(Rating2 ~ Uprice + Gender2 + Semana2)
reg_model <- lm(Rating ~Total + `Customer type` + Gender + `Product line` + Payment, data = sub_train)
#print(summary(reg_model))
# print(reg_model$coeff)
#regcoeff[i,] = reg_model$coeff
sub_test <- test[test$Branch==allstores[i],]
reg_model_test.lm  <- predict(reg_model , newdata=sub_test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm2 <- (sub_test$Rating -  reg_model_test.lm) #Calcular los errores de predicción (dato real - dato estimado)
summary(reg_model)
print(paste('Branch:', allstores[i],'/tError:',mean(abs(error.lm2))))
}
#2. Regresion lineal diferenciando por tienda
allstores = unique(train$Branch) # Valores únicos de cada tienda
nobs = nrow(train)  # filas del set de training
nbranches = length(allstores) # n de tiendas
atributos_interes <- c('Total','Gender')
#regcoeff = array(NA, dim=c(nbranches,length(atributos_interes))) # matriz auxiliar vacía para los coefs de las 3 tiendas
regcoeff = array(NA, dim=c(nbranches,11))
# Loop en las tiendas
for (i in 1:nbranches){
sub_train <- train[(train$Branch==allstores[i]),]
#regrmodel = lm(Rating2 ~ Uprice + Gender2 + Semana2)
reg_model <- lm(Rating ~Total + `Customer type` + Gender + `Product line` + Payment, data = sub_train)
#print(summary(reg_model))
# print(reg_model$coeff)
#regcoeff[i,] = reg_model$coeff
sub_test <- test[test$Branch==allstores[i],]
reg_model_test.lm  <- predict(reg_model , newdata=sub_test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm2 <- (sub_test$Rating -  reg_model_test.lm) #Calcular los errores de predicción (dato real - dato estimado)
summary(reg_model)
print(paste('Branch:', allstores[i],'\tError:',mean(abs(error.lm2))))
}
#Regresión autoselección
# Lasso
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Risge
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 0, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Risge
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 0, lambda = 1:10),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Risge
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 0, lambda = 0.001:1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Risge
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 0, lambda = seq(0.001,1,100)),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Risge
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 0, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Risge
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 0.5, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Rating-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Rating-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 10
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 20
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 10
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 10
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 10
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 20
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
#Modelo de aprendizaje de máquinas
#5. ML --> KNN
train.knn <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 10
)
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
print(paste('Error de predicción: ', mean(abs(error.knn))))
# 6. ML --> Random forest
train.randomf <- train(Rating ~ `Unit price`+ Branch + Gender + Semana,
data=train, method="rf",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.randomf)
ggplot(train.randomf)
test.randomf  <- predict(train.randomf, newdata=test)
error.randomf <- test$Rating-test.randomf
print(paste('Error de predicción: ', mean(abs(error.randomf))))
#Modelo Homogéneo con variables explicativas
df$Satisfecho <- df$Rating >= 7
head(df)
#Modelo Homogéneo con variables explicativas
df$Satisfecho <- as.numeric(df$Rating >= 7)
head(df)
#Modelo Homogéneo con variables explicativas
df$Satisfecho <- as.numeric(df$Rating >= 7)
head(df)
head(test)
#Modelo Homogéneo con variables explicativas
train$Satisfecho <- as.numeric(train$Rating >= 7)
test$Satisfecho <- as.numeric(test$Rating >= 7)
head(test)
#Regresiones regulares
#0. Regresion lineal sin diferenciar por tienda
train.lm <- train(form = Satisfecho ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
#Modelo Homogéneo con variables explicativas
train$Satisfecho <- as.factor(train$Rating >= 7)
test$Satisfecho <- as.factor(test$Rating >= 7)
head(test)
#Regresiones regulares
#0. Regresion lineal sin diferenciar por tienda
train.lm <- train(form = Satisfecho ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binomial'
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binomial',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "multinom", #Algoritmo
family = 'binomial',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'multinom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "mulitnom", #Algoritmo
#family = 'multinom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "multinom", #Algoritmo
#family = 'multinom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "multinom", #Algoritmo
#family = 'multinom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
install.packages('e1071')
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Rating-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "mulitnom", #Algoritmo
#family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "multinom", #Algoritmo
#family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Rating-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Rating-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Total +  Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Rating-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~ Total +  Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Satisfecho-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~  Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Satisfecho-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~  Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Satisfecho-test.lasso #Calcular los errores de predicción (dato real - dato estimado)
print(test.lasso)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~  Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- test$Satisfecho-as.numeric(test.lasso) #Calcular los errores de predicción (dato real - dato estimado)
#print(error.lasso)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
#Regresión autoselección
# Lasso
train.lasso <- train(form = Satisfecho ~  Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "glmnet", #Algoritmo
family = 'binom',
#tuneGrid = expand.grid(alpha = 1, lambda = 1),
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lasso  <- predict(train.lasso , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lasso <- as.numeric(test$Satisfecho)-as.numeric(test.lasso) #Calcular los errores de predicción (dato real - dato estimado)
#print(error.lasso)
print(paste('Error de predicción: ', mean(abs(error.lasso))))
