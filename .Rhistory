#    gg <- ggplot(data=df, aes(x=feature, col=factor(Eleccion))) + #Se define un gráfico con ggplot()
#      geom_bar(fill='white', alpha=0.5, position = 'identity') +
#      xlab(col)# Se
#      #theme(plot.title = element_text(hjust = 0.5))
#    print(gg)
#  }
#}
#run logit model
# cat("mlogit - logit\n")
# Liberías ####
library(mlogit)			# load package to compare
library(mnlogit)
# Base de datos ####
dir = './Dataset/Anime2_Logit.csv' # Nueva base actualizada
df <- read.table(file=dir, header=TRUE, sep=",")
df$Eleccion <- as.factor(df$Eleccion)
# Cambio de formato ####
df_anime <- mlogit.data(df, shape="wide", varying=4:ncol(df), choice="Eleccion")		#format the data
#run logit model
# cat("mlogit - logit\n")
#logit
animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Edad + Mujer, data = df_anime)
#animelogit <- mlogit(Eleccion ~ 0 | Mujer, data = df_formateada)
summary(animelogit)
intercepto = coef(animelogit)[0:3]
individual_coef = tail(coef(animelogit), n=6)
V = c(1:3)
for (i in c(1:3)){
V[i] = intercepto[i] + individual_coef[i]*25 + individual_coef[i+3]
}
prob_naruto = exp(V[3])/(sum(exp(V))+1)
print("Mujer de 25 años, probabilidad elegir Naruto: ")
print(prob_naruto)
#print("Mujer de 25 años, probabilidad elegir Naruto = ", as.character(prob_naruto))
#mixed logit
mixed_animelogit <- mlogit(Eleccion ~ Combat + Emotion + Qual + Rating | Edad + Mujer, data = df_anime,
rpar=c("hunterX:(intercept)"="n", "dragonball:(intercept)"="n", "naruto:(intercept)"="n", "Combat"="n", "Emotion"="n", "Qual"="n", "Rating"="n")#, "(intercept):dragonball"="n", "(intercept):naruto"="n")#, "Combat"="n", "Emotion"="n", "Qual" = "n", "Duration" = "n", "Rating" = "n")
)
getwd()
#probit
#logit
X_train <- read_csv('./Tarea2/Dataset/Anime2_X_train.csv')
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
#t1 = Sys.time()
#animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_anime2, probit= TRUE)
#
#summary(animeprobit)
#t2 = Sys.time()
#print(t2-t1)
View(X_train)
View(y_train)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train
df_train$Eleccion <- 0
df_train$Eleccion <- y_train
#t1 = Sys.time()
#animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_anime2, probit= TRUE)
#
#summary(animeprobit)
#t2 = Sys.time()
#print(t2-t1)
View(df_train)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
#t1 = Sys.time()
#animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_anime2, probit= TRUE)
#
#summary(animeprobit)
#t2 = Sys.time()
#print(t2-t1)
View(df_train)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,1:]
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,1:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
#t1 = Sys.time()
#animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_anime2, probit= TRUE)
#
#summary(animeprobit)
#t2 = Sys.time()
#print(t2-t1)
View(df_train)
View(df_train)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
#t1 = Sys.time()
#animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_anime2, probit= TRUE)
#
#summary(animeprobit)
#t2 = Sys.time()
#print(t2-t1)
View(df_train)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
t1 = Sys.time()
animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train, probit= TRUE)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv', skip=1)
y_train <- read_csv('./Dataset/Anime2_y_train.csv', skip=1)
df_train <- X_train #[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
t1 = Sys.time()
animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train, probit= TRUE)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv', skip='X1')
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train #[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
t1 = Sys.time()
animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train, probit= TRUE)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train #[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train$Eleccion <- as.factor(df_train$Eleccion)
t1 = Sys.time()
animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train, probit= TRUE)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train #[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train$Eleccion <- as.factor(df_train$Eleccion)
df_train_wide <- mlogit.data(df_train, shape="wide", varying=1:(ncol(df2)-1), choice="Eleccion")
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train #[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train$Eleccion <- as.factor(df_train$Eleccion)
df_train_wide <- mlogit.data(df_train, shape="wide", varying=1:(ncol(df_train)-1), choice="Eleccion")
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train$Eleccion <- as.factor(df_train$Eleccion)
df_train_wide <- mlogit.data(df_train, shape="wide", varying=1:(ncol(df_train)-1), choice="Eleccion")
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train_wide <- mlogit.data(df_train, shape="wide", varying=1:(ncol(df_train)-1), choice="Eleccion")
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train_wide <- mlogit.data(df_train, shape="wide", varying=1:22, choice="Eleccion")
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train_wide <- mlogit.data(df_train, shape="wide", varying=2:22, choice="Eleccion")
View(df_train)
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train_wide <- mlogit.data(df_train, shape="wide", varying=1:22, choice="Eleccion")
#probit
#logit
X_train <- read_csv('./Dataset/Anime2_X_train.csv')
y_train <- read_csv('./Dataset/Anime2_y_train.csv')
df_train <- X_train[,2:ncol(X_train)]
df_train$Eleccion <- 0
df_train$Eleccion <- y_train$Eleccion
df_train_wide <- mlogit.data(df_train, shape="wide", varying=3:22, choice="Eleccion")
t1 = Sys.time()
animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide, probit= TRUE)
summary(animeprobit)
t2 = Sys.time()
print(t2-t1)
df2 = df[sample(nrow(df), 1000, replace=F), ]
df_anime2 <- mlogit.data(df2, shape="wide", varying=4:ncol(df2), choice="Eleccion")
df2 = df[sample(nrow(df), 1000, replace=F), ]
df_anime2 <- mlogit.data(df2, shape="wide", varying=4:ncol(df2), choice="Eleccion")
df2 = df[sample(nrow(df), 1000, replace=F), ]
df_anime2 <- mlogit.data(df2, shape="wide", varying=4:ncol(df2), choice="Eleccion")
View(df_anime2)
df2 = df[sample(nrow(df), 1000, replace=F), ]
df_anime2 <- mlogit.data(df2, shape="wide", varying=4:ncol(df2), choice="Eleccion")
df2 = df[sample(nrow(df), 2000, replace=F), ]
df_anime2 <- mlogit.data(df2, shape="wide", varying=4:ncol(df2), choice="Eleccion")
df2 = df[sample(nrow(df), 1000, replace=F), ]
df_anime2 <- mlogit.data(df2, shape="wide", varying=4:ncol(df2), choice="Eleccion")
#probit
#logit
t1 = Sys.time()
animeprobit <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_anime2, probit= TRUE)
summary(animeprobit)
t2 = Sys.time()
print(t2-t1)
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
#df_train_wide <- mlogit.data(X_, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide, probit= TRUE)
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
#df_train_wide <- mlogit.data(X_, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide)
summary(logit1)
predict(logit1, X_test)
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
df_test <- df_train <- X_test[,2:ncol(X_test)]
df_test$Eleccion <- 0
df_test$Eleccion <- y_test$Eleccion
df_test_wide <- mlogit.data(df_test, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide)
summary(logit1)
#predict(logit1, df_test_wide[])
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
df_test <- df_train <- X_test[,2:ncol(X_test)]
df_test$Eleccion <- 0
df_test$Eleccion <- y_test$Eleccion
df_test_wide <- mlogit.data(df_test, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide)
summary(logit1)
predict(logit1, df_test_wide[,1:(ncol(df_test_wide)-)])
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
df_test <- df_train <- X_test[,2:ncol(X_test)]
df_test$Eleccion <- 0
df_test$Eleccion <- y_test$Eleccion
df_test_wide <- mlogit.data(df_test, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide)
summary(logit1)
predict(logit1, df_test_wide[,1:(ncol(df_test_wide)-1)])
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
df_test <- df_train <- X_test[,2:ncol(X_test)]
df_test$Eleccion <- 0
df_test$Eleccion <- y_test$Eleccion
df_test_wide <- mlogit.data(df_test, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide)
summary(logit1)
library(caret)
y_pred <- predict(logit1, df_test_wide[,1:(ncol(df_test_wide)-1)])
confusionMatrix(y_test, y_pred)
length(y_test)
y_test
#ML 1
X_test <- read_csv('./Dataset/Anime2_X_test.csv')
y_test <- read_csv('./Dataset/Anime2_y_test.csv')
df_test <- df_train <- X_test[,2:ncol(X_test)]
df_test$Eleccion <- 0
df_test$Eleccion <- y_test$Eleccion
df_test_wide <- mlogit.data(df_test, shape="wide", varying=3:22, choice="Eleccion")
logit1 <- mlogit(Eleccion ~ Combat + Emotion + Qual , data = df_train_wide)
summary(logit1)
library(caret)
y_pred <- predict(logit1, df_test_wide[,1:(ncol(df_test_wide)-1)])
confusionMatrix(y_test$Eleccion, y_pred)
len(y_test$Eleccion)
length(y_test$Eleccion)
length(y_pred)
pmax(y_pred)
View(y_pred)
View(y_pred)
View(df_train)
View(df_train)
View(X_train)
View(X_train)
knitr::opts_chunk$set(echo = TRUE)
library(caret) #librería modelos de ML
library(dplyr) #librería para usar antijoint y crear test data
library(rattle) #librería que contiene la BD wine
install.packages('rattle')
knitr::opts_chunk$set(echo = TRUE)
library(caret) #librería modelos de ML
library(dplyr) #librería para usar antijoint y crear test data
library(rattle) #librería que contiene la BD wine
library('ggplot2')
library('MLmetrics')
install.packages('MLmetrics')
knitr::opts_chunk$set(echo = TRUE)
library(caret) #librería modelos de ML
library(dplyr) #librería para usar antijoint y crear test data
library(rattle) #librería que contiene la BD wine
library('ggplot2')
library('MLmetrics')
rm(list=ls())   # Limpiamos todos los objetos creados en R. la función ls() indica los nombres de todos los objetos y rm() los remueve.
graphics.off()  # Limpiamos los gráficos en el ambiente Plots (esquina inferior derecha)
set.seed(12345) #Fijamos una semilla de aleatoriedad. Se debe realizar si se toman muestras aleatorias o se generan datos aleatorios.
#install.packages('rattle')
wine=wine #agregamos la data al workspace
wine$Type=as.numeric(wine$Type) #convertimos a numerica la columna de tipo de vino para posteriormente convertirla a character
head(wine[sample(nrow(wine),6 ), ])
#character variable Type
wine$Type[wine$Type== 1] <- 'Tipo1'
wine$Type[wine$Type== 2] <- 'Tipo2'
wine$Type[wine$Type== 3] <- 'Tipo3'
ggplot(wine, aes(Type, fill=Type)) + geom_bar(alpha=0.8) +
labs(x="Tipo", y="Número de Vinos en categoría") +
guides(fill=FALSE)+ggtitle("Frecuencia de tipo de vinos")
ggplot(wine, aes(x=Type,y=Alcohol,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Grado Alcohólico")+ggtitle("Boxplot de niveles de alcohol por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Malic,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Malic")+ggtitle("Boxplot de Malic por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Ash,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Ash")+ggtitle("Boxplot de Ash por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(Alcalinity, fill=Type)) +
geom_histogram(binwidth=1,alpha=0.8) +
labs(fill="Tipo", x="Grados de alcohol", y="Número de vinos")+ggtitle("Frecuencia de Alcalinidad por tipo de vino")
ggplot(wine, aes(x=Type,y=Magnesium,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Magnesium")+ggtitle("Boxplot de Magnesium por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Phenols,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Phenols")+ggtitle("Boxplot de Phenols por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Flavanoids,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Flavanoids")+ggtitle("Boxplot de Flavanoids por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Nonflavanoids,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Flavanoids")+ggtitle("Boxplot de Flavanoids por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Proanthocyanins,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Flavanoids")+ggtitle("Boxplot de Flavanoids por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(Color, fill=Type)) +
geom_histogram(binwidth=1,alpha=0.8) +
labs(fill="Tipo", x="Intensidad del color", y="Número de vinos")+ggtitle("Frecuencia de Color por tipo de vino")
ggplot(wine, aes(x=Type,y=Hue,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Hue")+ggtitle("Boxplot de Hue por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Dilution,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Hue")+ggtitle("Boxplot de Hue por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Proline,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Proline")+ggtitle("Boxplot de Proline por tipo de vino")+guides(fill=FALSE)
ggplot(wine, aes(x=Type,y=Color,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Coloración")+ggtitle("Boxplot de intensidad de color por tipo de vino")+guides(fill=FALSE)
trainwine=wine[sample(nrow(wine),100 ), ]
testwine=anti_join(wine, trainwine)
train.knn <- train( Type ~.,data=trainwine, method="knn",
trControl  = trainControl("cv",number=5,classProbs=TRUE, summaryFunction=multiClassSummary),
preProcess = c("center","scale"),
tuneLength = 6,
metric = 'logLoss')
print(train.knn)
ggplot(train.knn)
train.knn$results
test.knn<-predict(train.knn,newdata=testwine)
confusionMatrix(as.factor(test.knn),as.factor(testwine$Type))
Metrica=c('Precision','Recall','F1_Score', 'Accuracy')
Valores=c(Precision(testwine$Type,test.knn),Recall(testwine$Type,test.knn),F1_Score(testwine$Type,test.knn),Accuracy(testwine$Type,test.knn))
KNN=data.frame(Metrica,Valores)
#print(KNN)
head(KNN)
train.rf <- train( Type ~.,data=trainwine, method="rf",
trControl  = trainControl("cv",number=5,classProbs=TRUE, summaryFunction=multiClassSummary),
preProcess = c("center","scale"),
tuneLength = 6,
metric= 'logLoss')
print(train.rf)
ggplot(train.rf)
train.rf$results
test.rf<-predict(train.rf,newdata=testwine)
confusionMatrix(as.factor(test.rf),as.factor(testwine$Type))
Metrica=c('Precision','Recall','F1_Score', 'Accuracy')
Valores=c(Precision(testwine$Type,test.rf),Recall(testwine$Type,test.rf),F1_Score(testwine$Type,test.rf),Accuracy(testwine$Type,test.rf))
rf=data.frame(Metrica,Valores)
#print(rf)
head(rf)
train.svm <- train( Type ~.,data=trainwine, method="svmLinear2",
trControl  = trainControl("cv",number=5,classProbs=TRUE, summaryFunction=multiClassSummary),
preProcess = c("center","scale"),
tuneLength = 6,
metric= 'logLoss')
print(train.svm)
ggplot(train.svm)
train.svm$results
test.svm<-predict(train.svm,newdata=testwine)
confusionMatrix(as.factor(test.svm),as.factor(testwine$Type))
Metrica=c('Precision','Recall','F1_Score', 'Accuracy')
Valores=c(Precision(testwine$Type,test.svm),Recall(testwine$Type,test.svm),F1_Score(testwine$Type,test.svm),Accuracy(testwine$Type,test.svm))
svm=data.frame(Metrica,Valores)
#print(svm)
head(svm)
#Primero creamos un dataset con las variables escogidas
df <- wine[,c(1,2,11,12)]
head(df)
head(df)
View(df)
# Creamos los sets de entrenamiento y testeo
train_df=df[sample(nrow(df),100 ), ]
test_df=anti_join(df, train_df)
View(df)
ggplot(wine, aes(x=Type,y=Dilution,fill=Type)) +
geom_boxplot(alpha=0.8) +
labs(fill="Tipo", x="Tipo de vino", y="Dilution")+ggtitle("Boxplot de Hue por tipo de vino")+guides(fill=FALSE)
View(wine)
#Primero creamos un dataset con las variables escogidas
df <- wine[,c(1,2,11,13)]
head(df)
#Primero creamos un dataset con las variables escogidas
df <- wine[,c(1,2,11,13)]
head(df)
View(df)
# Creamos los sets de entrenamiento y testeo
train_df=df[sample(nrow(df),100 ), ]
test_df=anti_join(df, train_df)
train.knn <- train( Type ~.,data=train_df, method="knn",
trControl  = trainControl("cv",number=5,classProbs=TRUE, summaryFunction=multiClassSummary),
preProcess = c("center","scale"),
tuneLength = 6,
metric = 'logLoss')
print(train.knn)
ggplot(train.knn)
train.knn$results
#Testeamos
test.knn<-predict(train.knn,newdata=test_df)
confusionMatrix(as.factor(test.knn),as.factor(test_df$Type))
# Obtenemos las métricas
Metrica=c('F1_Score', 'Accuracy')
Valores=c(F1_Score(test_df$Type,test.knn),Accuracy(test_df$Type,test.knn))
KNN=data.frame(Metrica,Valores)
head(KNN)
View(KNN)
#Usamos los mismos sets de train y test
train.svm <- train( Type ~.,data=train_df, method="svmLinear2",
trControl  = trainControl("cv",number=5,classProbs=TRUE, summaryFunction=multiClassSummary),
preProcess = c("center","scale"),
tuneLength = 6,
metric= 'logLoss')
print(train.svm)
ggplot(train.svm)
train.svm$results
test.svm<-predict(train.svm,newdata=testwine)
confusionMatrix(as.factor(test.svm),as.factor(testwine$Type))
Metrica=c('F1_Score', 'Accuracy')
Valores=c(F1_Score(test_df$Type,test.svm),Accuracy(test_df$Type,test.svm))
svm=data.frame(Metrica,Valores)
#print(svm)
head(svm)
View(svm)
nrow(df)
nrow(train_df)
nrow(train_df)/nrow(df)
Accuracy(test_df$Type,test.svm)
F1_Score(test_df$Type,test.svm)
F1_Score(factor(test_df$Type),factor(test.svm))
Accuracy(factor(test_df$Type),factor(test.svm))
