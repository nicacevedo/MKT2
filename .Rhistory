View(df)
TablaA
#Divsion de los datos
# samples aleatorio
index <- sample(1:nrow(df), size= nrow(df)*0.7)
# entrenamiento 70%
train <- df[index, ]
# test 30%
test  <- df[-index, ]
#EDA
#0. Histograma de todas las variables
hist.data.frame(df)
help(hist.data.frame)
hist.data.frame(df[,-1])
hist.data.frame(df[,c(-1,11)])
#0. Histograma de todas las variables
hist.data.frame(df[,-c(1,11)])
df$Time
df$Time < 12:00:00
df$Time < hour(12:00:00)
df$Time < hour("12:00:00")
help(hour)
class(df$Time)
hms(12:00:00)
str(df)
hms(120000)
help(hms)
hms
as.hour("10:00:00")
library(epitools)
install.packages("epitools")
library(epitools)
as.hour("10:00:00")
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345) #Fijamos una semilla de aleatoriedad. Se debe realizar si se toman muestras aleatorias o se generan datos aleatorios.
# Cargamos librerias útiles
library(dplyr)
library(knitr)
library(readr)
library(lubridate)
library(ggplot2)
library(lattice)
library(caret)
library(Hmisc)
# Cargar Bases de Datos
supermarket_sales <- read_csv("./Tarea1/supermarket_sales.csv")
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345) #Fijamos una semilla de aleatoriedad. Se debe realizar si se toman muestras aleatorias o se generan datos aleatorios.
# Cargamos librerias útiles
library(dplyr)
library(knitr)
library(readr)
library(lubridate)
library(ggplot2)
library(lattice)
library(caret)
library(Hmisc)
# Cargar Bases de Datos
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
#transformar a categoricas
df$Branch = as.factor(df$Branch)
df$City =as.factor(df$City)
df$`Customer type`= as.factor(df$`Customer type`)
df$Gender =as.factor(df$Gender)
df$`Product line` = as.factor(df$`Product line`)
df$Payment = as.factor(df$Payment)
#Pasar Date a tipo fecha
df$Date = as.Date(df$Date, tryFormats = c("%m/%d/%Y"))
class(df$Date)
#1. clasificamos por semana c/fecha
df$Semana <- cut(df$Date, breaks = "1 week", labels = FALSE)
df$Semana = as.factor(df$Semana)
df <- df[with(df, order(df$Date)), ]
# Agregamos el día de la semana
df$Day <- as.factor(weekdays(df$Date))
# Agregamos hora del día (mañana, tarde, noche)
#Divsion de los datos
# samples aleatorio
index <- sample(1:nrow(df), size= nrow(df)*0.7)
# entrenamiento 70%
train <- df[index, ]
# test 30%
test  <- df[-index, ]
#Exploración de datos
#1. Histograma de todas las variables
hist.data.frame(df[,-c(1,11)])
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345) #Fijamos una semilla de aleatoriedad. Se debe realizar si se toman muestras aleatorias o se generan datos aleatorios.
# Cargamos librerias útiles
library(dplyr)
library(knitr)
library(readr)
library(lubridate)
library(ggplot2)
library(lattice)
library(caret)
library(Hmisc)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345) #Fijamos una semilla de aleatoriedad. Se debe realizar si se toman muestras aleatorias o se generan datos aleatorios.
# Cargamos librerias útiles
library(dplyr)
library(knitr)
library(readr)
library(lubridate)
library(ggplot2)
library(lattice)
library(caret)
library(Hmisc)
# Cargar Bases de Datos
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
#transformar a categoricas
df$Branch = as.factor(df$Branch)
df$City =as.factor(df$City)
df$`Customer type`= as.factor(df$`Customer type`)
df$Gender =as.factor(df$Gender)
df$`Product line` = as.factor(df$`Product line`)
df$Payment = as.factor(df$Payment)
#Pasar Date a tipo fecha
df$Date = as.Date(df$Date, tryFormats = c("%m/%d/%Y"))
class(df$Date)
#1. clasificamos por semana c/fecha
df$Semana <- cut(df$Date, breaks = "1 week", labels = FALSE)
df$Semana = as.factor(df$Semana)
df <- df[with(df, order(df$Date)), ]
# Agregamos el día de la semana
df$Day <- as.factor(weekdays(df$Date))
# Agregamos hora del día (mañana, tarde, noche)
# Cargar Bases de Datos
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
#transformar a categoricas
df$Branch = as.factor(df$Branch)
df$City =as.factor(df$City)
df$`Customer type`= as.factor(df$`Customer type`)
df$Gender =as.factor(df$Gender)
df$`Product line` = as.factor(df$`Product line`)
df$Payment = as.factor(df$Payment)
#Pasar Date a tipo fecha
df$Date = as.Date(df$Date, tryFormats = c("%m/%d/%Y"))
class(df$Date)
#1. clasificamos por semana c/fecha
df$Semana <- cut(df$Date, breaks = "1 week", labels = FALSE)
df$Semana = as.factor(df$Semana)
df <- df[with(df, order(df$Date)), ]
# Agregamos el día de la semana
df$Day <- as.factor(weekdays(df$Date))
# Agregamos hora del día (mañana, tarde, noche)
# Cargar Bases de Datos
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
#transformar a categoricas
df$Branch = as.factor(df$Branch)
df$City =as.factor(df$City)
df$`Customer type`= as.factor(df$`Customer type`)
df$Gender =as.factor(df$Gender)
df$`Product line` = as.factor(df$`Product line`)
df$Payment = as.factor(df$Payment)
#Pasar Date a tipo fecha
df$Date = as.Date(df$Date, tryFormats = c("%m/%d/%Y"))
#1. clasificamos por semana c/fecha
df$Semana <- cut(df$Date, breaks = "1 week", labels = FALSE)
df$Semana = as.factor(df$Semana)
df <- df[with(df, order(df$Date)), ]
# Agregamos el día de la semana
df$Day <- as.factor(weekdays(df$Date))
# Agregamos hora del día (mañana, tarde, noche)
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
#transformar a categoricas
df$Branch = as.factor(df$Branch)
df$City = as.factor(df$City)
df$`Customer type`= as.factor(df$`Customer type`)
df$Gender =as.factor(df$Gender)
df$`Product line` = as.factor(df$`Product line`)
df$Payment = as.factor(df$Payment)
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
egamos hora del día (mañana, tarde, noche)
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
# Cargar Bases de Datos
supermarket_sales <- read_csv("./supermarket_sales.csv")
df <- supermarket_sales
#transformar a categoricas
df$Branch = as.factor(df$Branch)
df$City = as.factor(df$City)
df$`Customer type`= as.factor(df$`Customer type`)
df$Gender =as.factor(df$Gender)
df$`Product line` = as.factor(df$`Product line`)
df$Payment = as.factor(df$Payment)
#Pasar Date a tipo fecha
df$Date = as.Date(df$Date, tryFormats = c("%m/%d/%Y"))
#1. clasificamos por semana c/fecha
df$Semana <- cut(df$Date, breaks = "1 week", labels = FALSE)
df$Semana = as.factor(df$Semana)
df <- df[with(df, order(df$Date)), ]
# Agregamos el día de la semana
df$Day <- as.factor(weekdays(df$Date))
# Agregamos hora del día (mañana, tarde, noche)
#17. Boxplot Branch
ggplot(df) +
aes(x=`Customer type`, y=Rating) +
geom_boxplot(alpha=0.4, fill="blue") #cambiamos el tipo de gráfico
#Exploración de datos
#1. Histograma de todas las variables
hist.data.frame(df[,-c(1,11)])
#Exploración de datos
#1. Histograma de todas las variables
hist.data.frame(df[,-c(1,11)])
#Exploración de datos
#1. Histograma de todas las variables
hist.data.frame(df[,-c(1,11)])
#1. Histograma de todas las variables
hist.data.frame(df[,-c(1,11)])
#Exploración de datos
#0. Histograma de todas las variables
#hist.data.frame(df[,-c(1,11)])
#1. Histograma variable de interes
ggplot(data=df)+ #Se define un gráfico con ggplot()
aes(x=Rating)+ #Solo le ingresamos el eje "x" para un histograma
geom_histogram(col="black", fill="green", alpha = 0.2) # Se define la forma del gráfico. "col" pinta el contorno, "fill" el entorno y "alpha" entrega transparencia
#2. Histograma Unit price
ggplot(data=df)+
aes(x=Total)+
geom_histogram(col="black", fill="green", alpha=0.2)+
xlab("Precio unitario")+ #Etiqueta para el eje x
ylab("Frecuencia")+ #Etiqueta para el eje y
ggtitle("Distribución Precio unitario")+ #Título del gráfico
theme(plot.title = element_text(hjust = 0.5)) #centra el título en el gráfico. Lo ajusta en la posición horizontal (hjust = 0.5)
#2.2. Histograma Unit price
ggplot(data=df)+
aes(x=log(Total))+
geom_histogram(col="black", fill="green", alpha=0.2)+
xlab("Precio unitario")+ #Etiqueta para el eje x
ylab("Frecuencia")+ #Etiqueta para el eje y
ggtitle("Distribución Precio unitario")+ #Título del gráfico
theme(plot.title = element_text(hjust = 0.5)) #centra el título en el gráfico. Lo ajusta en la posición horizontal (hjust = 0.5)
#3. Scatterplot Branch
ggplot(df) +
aes(x=Total, y=Rating, col=Branch)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#3.2. Scatterplot Branch
ggplot(df) +
aes(x=log(Total), y=Rating, col=Day)+ #Se agrega una dimensión de colores "col".
geom_point(size=1, alpha=0.4) +
geom_smooth(se=FALSE, method="lm") +
xlab("Precio unitario")
#4. Boxplot Branch
ggplot(df) +
aes(x=Branch, y=Rating) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#5. Boxplot Branch
ggplot(df) +
aes(x=Branch, y=log(Total)) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
# Obs: Vemos que los precios son similares, pero que van subiendo un poco de Branch en Branch en cuando
# la media. En cambio, en Rating, se ve una clara baja de este en la Branch B.
#6. Boxplot Branch
ggplot(df) +
aes(x=Day, y=Rating) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#7. Boxplot Branch
ggplot(df) +
aes(x=Day, y=`Unit price`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#8. Boxplot Branch
ggplot(df) +
aes(x=Semana, y=`Unit price`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#9. Boxplot Branch
ggplot(df) +
aes(x=Semana, y=Rating) +
geom_boxplot(alpha=0.4, fill="blue") #cambiamos el tipo de gráfico
# genero
#10. Boxplot Branch
ggplot(df) +
aes(x=Gender, y=`Unit price`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#11. Boxplot Branch
ggplot(df) +
aes(x=Gender, y=Rating) +
geom_boxplot(alpha=0.4, fill="blue") #cambiamos el tipo de gráfico
# Payment
#12. Boxplot Branch
ggplot(df) +
aes(x=Payment, y=`Unit price`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#13. Boxplot Branch
ggplot(df) +
aes(x=Payment, y=Rating) +
geom_boxplot(alpha=0.4, fill="blue") #cambiamos el tipo de gráfico
# Customer type
#14. Boxplot Branch
ggplot(df) +
aes(x=`Customer type`, y=`Unit price`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#15. Boxplot Branch
ggplot(df) +
aes(x=`Customer type`, y=Rating) +
geom_boxplot(alpha=0.4, fill="blue") #cambiamos el tipo de gráfico
# Customer type
#16. Boxplot Branch
ggplot(df) +
aes(x=`Customer type`, y=`Unit price`) +
geom_boxplot(alpha=0.4, fill="black") #cambiamos el tipo de gráfico
#17. Boxplot Branch
ggplot(df) +
aes(x=`Customer type`, y=Rating) +
geom_boxplot(alpha=0.4, fill="blue") #cambiamos el tipo de gráfico
#Regresiones regulares
#0. Regresion lineal sin diferenciar por tienda
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
df$Rating
mean(abs(df$Rating-7))
mean(abs(df$Rating-7.158))
mean(abs(df$Rating-mean(df$Rating)))
train
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lasso", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lasso", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
#Regresiones regulares
#0. Regresion lineal sin diferenciar por tienda
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lm", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "knn", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
summary(train.lm)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "knn", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "rr", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "ridge", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "random forest", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "rf", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "rf", #Algoritmo
trControl = trainControl(method = "mars", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "rf", #Algoritmo
trControl = trainControl(method = "earth", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "rpart2", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "lasso", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch + `Customer type` + Gender + `Product line` + Payment + Day, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch  + Gender + `Product line` + Payment , #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + Branch  + Gender + `Product line` +  , #Fórmula
# Lasso
train.lm <- train(form = Rating ~ Total + Branch  + Gender + `Product line`, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total + `Product line`, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Total , #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ , #Fórmula
# Lasso
train.lm <- train(form = Rating ~ 1, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
# Lasso
train.lm <- train(form = Rating ~ Day, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
# Lasso
train.lm <- train(form = Rating ~ Day + Quantity + `Unit price`, #Fórmula
data = train, #Datos
method = "earth", #Algoritmo
trControl = trainControl(method = "cv", number = 5) #Method = cross validation, number=10 (k-fold)
)
test.lm  <- predict(train.lm , newdata=test) #Vector de datos predichos. Recibe una base de datos (newdata) y un modelo entrenado (train.lm)
error.lm <- test$Rating-test.lm #Calcular los errores de predicción (dato real - dato estimado)
print(paste('Error de predicción: ', mean(abs(error.lm))))
